/*
 * 中信云平台供应商适配器管理内部API
 * 中信云供应商适配器API定义了供应商/租户/用户管理、服务管理、计费管理等功能模块构成的中信云平台与供应商适配器之间的协议。适配器应在一个URI（统一资源标识符）下实现多个HTTP或HTTPS接入点。一个适配器可以提供多个供应商，每个供应商可包括多个服务（一个供应商的服务仅能存在于一个适配器中）。理想状态是，一个适配器仅包含一个供应商，及其全部服务。适配器应该是可以水平弹性扩展的。多个中信云平台部署实例可以用不同的地址和授权访问同一个适配器.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.oracle.citiccloud.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.oracle.citiccloud.model.OptionValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * ConfigOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-05-17T12:22:27.214+08:00")
public class ConfigOption   {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("required")
  private Boolean required = false;

  @JsonProperty("display_name")
  private String displayName = null;

  /**
   * 数据类型, options 指下拉选择框， ooptions_tree 指多级下拉选择框
   */
  public enum DataTypeEnum {
    STRING("string"),
    
    INT("int"),
    
    DOUBLE("double"),
    
    OPTIONS("options"),
    
    OPTIONS_TREE("options_tree"),
    
    IMAGE("image");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataTypeEnum fromValue(String text) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("data_type")
  private DataTypeEnum dataType = null;

  /**
   * 数据来源，目前支持两种，1.默认情况 default，通过中信云网的通用配置界面获得; 2. config_url, 通过供应商提供的外部URL获得
   */
  public enum DataSourceEnum {
    DEFAULT("default"),
    
    CONFIG_URL("config_url");

    private String value;

    DataSourceEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataSourceEnum fromValue(String text) {
      for (DataSourceEnum b : DataSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("data_source")
  private DataSourceEnum dataSource = null;

  @JsonProperty("default")
  private String _default = null;

  @JsonProperty("instruction")
  private String instruction = null;

  @JsonProperty("unit")
  private String unit = null;

  @JsonProperty("min")
  private String min = null;

  @JsonProperty("max")
  private String max = null;

  @JsonProperty("step")
  private String step = null;

  @JsonProperty("values")
  private List<OptionValue> values = null;

  public ConfigOption name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 配置项的名称，在用户选定配置后将以此域作为返回值的key
   * @return name
  **/
  @JsonProperty("name")
  @ApiModelProperty(required = true, value = "配置项的名称，在用户选定配置后将以此域作为返回值的key")
  @NotNull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ConfigOption required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * 是否必填项
   * @return required
  **/
  @JsonProperty("required")
  @ApiModelProperty(value = "是否必填项")
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public ConfigOption displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * WEB页面显示的选项名称
   * @return displayName
  **/
  @JsonProperty("display_name")
  @ApiModelProperty(required = true, value = "WEB页面显示的选项名称")
  @NotNull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public ConfigOption dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * 数据类型, options 指下拉选择框， ooptions_tree 指多级下拉选择框
   * @return dataType
  **/
  @JsonProperty("data_type")
  @ApiModelProperty(value = "数据类型, options 指下拉选择框， ooptions_tree 指多级下拉选择框")
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public ConfigOption dataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * 数据来源，目前支持两种，1.默认情况 default，通过中信云网的通用配置界面获得; 2. config_url, 通过供应商提供的外部URL获得
   * @return dataSource
  **/
  @JsonProperty("data_source")
  @ApiModelProperty(value = "数据来源，目前支持两种，1.默认情况 default，通过中信云网的通用配置界面获得; 2. config_url, 通过供应商提供的外部URL获得")
  public DataSourceEnum getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
  }

  public ConfigOption _default(String _default) {
    this._default = _default;
    return this;
  }

   /**
   * 该配置项的默认值
   * @return _default
  **/
  @JsonProperty("default")
  @ApiModelProperty(required = true, value = "该配置项的默认值")
  @NotNull
  public String getDefault() {
    return _default;
  }

  public void setDefault(String _default) {
    this._default = _default;
  }

  public ConfigOption instruction(String instruction) {
    this.instruction = instruction;
    return this;
  }

   /**
   * 该配置项的输入说明
   * @return instruction
  **/
  @JsonProperty("instruction")
  @ApiModelProperty(value = "该配置项的输入说明")
  public String getInstruction() {
    return instruction;
  }

  public void setInstruction(String instruction) {
    this.instruction = instruction;
  }

  public ConfigOption unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * 该配置项的单位
   * @return unit
  **/
  @JsonProperty("unit")
  @ApiModelProperty(value = "该配置项的单位")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public ConfigOption min(String min) {
    this.min = min;
    return this;
  }

   /**
   * 该配置项的最小值
   * @return min
  **/
  @JsonProperty("min")
  @ApiModelProperty(value = "该配置项的最小值")
  public String getMin() {
    return min;
  }

  public void setMin(String min) {
    this.min = min;
  }

  public ConfigOption max(String max) {
    this.max = max;
    return this;
  }

   /**
   * 该配置项的最大值
   * @return max
  **/
  @JsonProperty("max")
  @ApiModelProperty(value = "该配置项的最大值")
  public String getMax() {
    return max;
  }

  public void setMax(String max) {
    this.max = max;
  }

  public ConfigOption step(String step) {
    this.step = step;
    return this;
  }

   /**
   * 配置项每次增加的值
   * @return step
  **/
  @JsonProperty("step")
  @ApiModelProperty(value = "配置项每次增加的值")
  public String getStep() {
    return step;
  }

  public void setStep(String step) {
    this.step = step;
  }

  public ConfigOption values(List<OptionValue> values) {
    this.values = values;
    return this;
  }

  public ConfigOption addValuesItem(OptionValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<OptionValue>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @JsonProperty("values")
  @ApiModelProperty(value = "")
  public List<OptionValue> getValues() {
    return values;
  }

  public void setValues(List<OptionValue> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigOption configOption = (ConfigOption) o;
    return Objects.equals(this.name, configOption.name) &&
        Objects.equals(this.required, configOption.required) &&
        Objects.equals(this.displayName, configOption.displayName) &&
        Objects.equals(this.dataType, configOption.dataType) &&
        Objects.equals(this.dataSource, configOption.dataSource) &&
        Objects.equals(this._default, configOption._default) &&
        Objects.equals(this.instruction, configOption.instruction) &&
        Objects.equals(this.unit, configOption.unit) &&
        Objects.equals(this.min, configOption.min) &&
        Objects.equals(this.max, configOption.max) &&
        Objects.equals(this.step, configOption.step) &&
        Objects.equals(this.values, configOption.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, required, displayName, dataType, dataSource, _default, instruction, unit, min, max, step, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigOption {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    instruction: ").append(toIndentedString(instruction)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

